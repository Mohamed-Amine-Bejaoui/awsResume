import { S3Client, GetObjectCommand } from "@aws-sdk/client-s3";
import { DynamoDBClient, PutItemCommand, UpdateItemCommand } from "@aws-sdk/client-dynamodb";
import { TextractClient, DetectDocumentTextCommand } from "@aws-sdk/client-textract";
import { ComprehendClient, DetectKeyPhrasesCommand } from "@aws-sdk/client-comprehend"; 
import { getSignedUrl } from "@aws-sdk/s3-request-presigner"; 

const s3 = new S3Client();
const dynamoDB = new DynamoDBClient();
const textract = new TextractClient();
const comprehend = new ComprehendClient(); 

export const handler = async (event) => {
  try {
    const bucketName = event.Records[0].s3.bucket.name;
    const objectKey = decodeURIComponent(event.Records[0].s3.object.key.replace(/\+/g, " "));

    const textractParams = {
      Document: { S3Object: { Bucket: bucketName, Name: objectKey } },
    };
    const textractResponse = await textract.send(new DetectDocumentTextCommand(textractParams));

    const extractedText = textractResponse.Blocks
      .filter((block) => block.BlockType === "LINE")
      .map((block) => block.Text)
      .join("\n");

    const dynamoParams = {
      TableName: "resumes",
      Item: {
        id: { S: objectKey },
        extractedText: { S: extractedText },
        status: { S: "SUCCEEDED" },
        createdAt: { S: new Date().toISOString() },
      },
    };
    await dynamoDB.send(new PutItemCommand(dynamoParams));

    const comprehendParams = {
      Text: extractedText,
      LanguageCode: "en", 
    };
    const comprehendResponse = await comprehend.send(new DetectKeyPhrasesCommand(comprehendParams));

    const keyPhrases = [...new Set(comprehendResponse.KeyPhrases.map((kp) => kp.Text))];

    console.log("Extracted Key Phrases:", keyPhrases);

    const updateParams = {
      TableName: "resumes",
      Key: { id: { S: objectKey } },
      UpdateExpression: "SET #keyPhrases = :keyPhrases",
      ExpressionAttributeNames: {
        "#keyPhrases": "keyPhrases",
      },
      ExpressionAttributeValues: {
        ":keyPhrases": { SS: keyPhrases }, 
      },
    };
    await dynamoDB.send(new UpdateItemCommand(updateParams));

    return {
      statusCode: 200,
      body: JSON.stringify({
        message: "Text and key phrases extracted successfully",
        extractedText,
        keyPhrases,
      }),
    };
  } catch (error) {
    console.error("Error:", error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: error.message }),
    };
  }
};
